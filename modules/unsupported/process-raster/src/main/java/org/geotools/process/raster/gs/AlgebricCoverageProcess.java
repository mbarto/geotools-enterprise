/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 * 
 *    (C) 2005-2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotools.process.raster.gs;

import it.geosolutions.jaiext.algebra.AlgebraDescriptor.Operator;
import it.geosolutions.jaiext.range.Range;

import java.util.List;

import org.geotools.coverage.grid.GridCoverage2D;
import org.geotools.coverage.processing.CoverageProcessor;
import org.geotools.factory.Hints;
import org.geotools.process.ProcessException;
import org.geotools.process.factory.DescribeParameter;
import org.geotools.process.factory.DescribeProcess;
import org.geotools.process.factory.DescribeResult;
import org.geotools.process.raster.BaseCoverageAlgebraProcess;
import org.opengis.coverage.processing.Operation;
import org.opengis.parameter.ParameterValueGroup;

import com.vividsolutions.jts.geom.Geometry;

@DescribeProcess(title = "Process Coverages", description = "Returns a raster generated by pixel-by-pixel algebric operation of N source rasters.  Source rasters must have the same bounding box and resolution.")
public class AlgebricCoverageProcess{

    private static final CoverageProcessor PROCESSOR = CoverageProcessor.getInstance();

    private static final Operation ALGEBRIC_OP = PROCESSOR.getOperation("algebric");

    @DescribeResult(name = "result", description = "Calculated Raster")
    public GridCoverage2D execute(
            @DescribeParameter(name = "coverages", description = "Input rasters", min = 2) List<GridCoverage2D> coverages,
            @DescribeParameter(name = "operation", description = "Operator to use for the algebric operation") Operator algebricOp,
            @DescribeParameter(name = "roi", description = "Optional roi to use for calculations") Geometry roi,
            @DescribeParameter(name = "noData", description = "Optional No Data Range to use for calculations") Range noData,
            @DescribeParameter(name = "destinationNoData", description = "Optional output value for No Data to use for calculations") Double destinationNoData,
            @DescribeParameter(name = "hints", description = "Optional hints used for calculations")Hints hints
                    )throws ProcessException {

        // //
        //
        // Initialization: compatibility checks
        //
        // //
        BaseCoverageAlgebraProcess.checkCompatibleCoverages(coverages);

        // //
        //
        // Settings of the sources
        //
        // //
        final ParameterValueGroup param = ALGEBRIC_OP.getParameters();

        param.parameter("sources").setValue(coverages);
         
        // //
        //
        // Settings of the parameters
        //
        // //
        param.parameter("operation").setValue(algebricOp);
        param.parameter("noData").setValue(noData);      
        param.parameter("destinationNoData").setValue(destinationNoData);
        param.parameter("roi").setValue(roi);
        
        // //
        //
        // Doing the Operation
        //
        // //
        return (GridCoverage2D) PROCESSOR.doOperation(param,hints);
    }

}
